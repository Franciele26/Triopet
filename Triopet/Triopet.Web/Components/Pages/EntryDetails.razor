@page "/entrydetails/{Id:int}"
@using Triopet.Shared.Models
@inject IApiService ApiService
@inject ISnackbar Snackbar
@inject NavigationManager Navig
@rendermode InteractiveServer
@using MudBlazor


<PageTitle>Entry Details</PageTitle>

@if (loading == true)
{
    <MudProgressCircular Indeterminate="true" Color="Color.Primary" Size="Size.Large" />
}
else
{
    <MudSnackbarProvider />
    <MudContainer MaxWidth="MaxWidth.ExtraLarge" Class="mt-4">
        <MudPaper Elevation="3" Class="pa-6">
            <MudIconButton OnClick="@GoBack" Icon="@Icons.Material.Filled.ArrowBackIos" />
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.SpaceBetween" Class="my-2">
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="my-2">
                    <MudText Typo="Typo.h5" GutterBottom="true">
                        Entries:
                    </MudText>
                    <MudText Typo="Typo.h6" GutterBottom="true">
                        @Entry.Id
                    </MudText>
                </MudStack>
                <MudStack Row="true" AlignItems="AlignItems.Center" Class="my-2">
                    <MudText Typo="Typo.h5" GutterBottom="true">
                        Date:
                    </MudText>
                    <MudText Typo="Typo.h6" GutterBottom="true">
                        @Entry.DateOfEntry
                    </MudText>
                </MudStack>
            </MudStack>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="my-2">
            </MudStack>
            <MudDivider Class="my-4" Style="background-color: #333; height: 2px;"></MudDivider>

            <MudText Typo="Typo.h6" GutterBottom="true">Exit list products</MudText>

            <MudTable Items="@Entry.ProductEntries" Class="mb-4">
                <HeaderContent>
                    <MudTh>Product</MudTh>
                    <MudTh>Category</MudTh>
                    <MudTh>Type of animal</MudTh>
                    <MudTh>Quantity</MudTh>
                    <MudTh>Unit Price</MudTh>
                </HeaderContent>
                <RowTemplate>
                    <MudTd>@context?.Product?.Name</MudTd>

                    <MudTd>@context?.Product?.Category.Category</MudTd>

                    <MudTd>@context?.Product?.AnimalType.AnimalType</MudTd>

                    <MudTd>@context?.Quantity</MudTd>

                    <MudTd>@context?.PriceUnitOfEntry</MudTd>
                </RowTemplate>
            </MudTable>
            <MudStack Row AlignItems="AlignItems.Center" Justify="Justify.FlexStart" Class="my-2">
                <MudText Typo="Typo.h5">Total:</MudText>
                <MudText Typo="Typo.h5" Color="Color.Primary">@Total().ToString("C")</MudText>
            </MudStack>

            <MudDivider Class="my-4" Style="background-color: #333; height: 2px;" />

            <MudStack Row Justify="Justify.FlexEnd" Spacing="2">
                <MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="Editar">
                    Edit
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Error" OnClick="DeleteEntry">
                    Delete
                </MudButton>
            </MudStack>

        </MudPaper>
    </MudContainer>
}

@code {
    [Parameter]
    public int Id { get; set; }
    private EntryDto Entry { get; set; } = new();
    private bool loading { get; set; } = false;
    protected override async Task OnInitializedAsync()
    {
        Snackbar.Clear();
        if (Id > 0)
        {
            loading = true;
            Entry = await ApiService.GetEntryById(Id);
            await Task.Delay(300);
            loading = false;
        }
    }

    public decimal Total()
    {
        if (Entry?.ProductEntries == null)
        {
            return 0;
        }
        return Entry.ProductEntries.Sum(p => p.Quantity * p.PriceUnitOfEntry);
    }

    private async Task DeleteEntry()
    {
        var responseDelete = await ApiService.DeleteEntry(Id);
        if (responseDelete.StatusCode == System.Net.HttpStatusCode.OK)
        {
            Snackbar.Add($"Entry id {Id} was deleted\n" +
                $"Page will be redirected to the List", Severity.Success);
            StateHasChanged();
            await Task.Delay(3000);//vai ficar 3 segundos na pagina
            Navig.NavigateTo("/entries");
        }
        else
        {
            Snackbar.Add("Error trying to erase an entry");
        }
    }

    private void GoBack()
    {
        Navig.NavigateTo($"/entries");
    }

    private void Editar()
    {
        Navig.NavigateTo($"/editentry/{Id}");
    }
}