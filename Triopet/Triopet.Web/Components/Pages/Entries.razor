@page "/addentry"
@page "/editentry/{Id:int}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Triopet.Shared.Models
@rendermode InteractiveServer

<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Entry</h3>
}
else
{
    <h3>Add Entry</h3>
}

<EditForm Model="NewEntry" OnValidSubmit="OnAddEntry">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Id:</label>
        <input type="text" @bind="NewEntry.Id" class="form-control" />
    </div>

    <div class="form-group">
        <label>Quantidade:</label>
        <input type="text" @bind="NewEntry.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Preço de Entrada:</label>
        <select class="form-control" @bind="NewEntry.PriceUnitOfEntry">
            <option value="">Selecione uma categoria</option>
        </select>
    </div>

    <div class="form-group">
        <label>Product Id:</label>
        <select class="form-control" @bind="NewEntry.ProductId">
            <option value="">Selecione um tipo de animal</option>
        </select>
    </div>

    <div class="form-group">
        <label>URL da imagem:</label>
        <input type="text" @bind="NovaImagemUrl" class="form-control" />
    </div>


    <nav aria-label="Ações do produto" class="mt-3">
        <button class="btn btn-primary" type="submit">@buttonText</button>
        <button @onclick="Voltar" type="button" class="btn btn-secondary mt-2 ms-2">Voltar</button>
    </nav>

    <ValidationSummary />
</EditForm>
@if (!string.IsNullOrEmpty(Mensagem))
{
    <p class="text-success mt-3">@Mensagem</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string buttonText => Id > 0 ? "Save" : "Add";

    private List<ProductEntryDto> Entry = new();

    public ProductEntryDto NewEntry = new();

    private string Mensagem = string.Empty;



    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Entry = await ApiService.GetEntryAsync();

        if (Id > 0)
        {
            var product = await ApiService.GetProductById(Id);

            if (product != null)
            {
                product.CategoryId = product.Category?.Id ?? 0;
                product.AnimalTypeId = product.AnimalType?.Id ?? 0;

                NewEntry = product;

            }
        }
    }

    private async Task OnAddEntry()
    {
        NewProduct.Category = Categorias.FirstOrDefault(c => c.Id == NewProduct.CategoryId) ?? new CategoryDto();
        NewProduct.AnimalType = AnimalTypes.FirstOrDefault(t => t.Id == NewProduct.AnimalTypeId) ?? new AnimalTypeDto();

        if (Id > 0)
        {
            var response = await ApiService.UpdateProduct(NewProduct);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto atualizado com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao atualizar produto", Severity.Success);
            }
        }
        else
        {
            var response = await ApiService.AddProductAsync(NewProduct);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto adicionado com sucesso!", Severity.Success);
                ImagensTemporarias.Clear();
                NewProduct = new ProductDto();
            }
            else
            {
                Snackbar.Add("Erro ao adicionar produto", Severity.Error);
            }
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }
}