@page "/addentry"
@page "/editentry/{Id:int}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Triopet.Shared.Models
@rendermode InteractiveServer

<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Entry</h3>
}
else
{
    <h3>Add Entry</h3>
}

<EditForm Model="NewEntry" OnValidSubmit="OnAddEntry">
    <DataAnnotationsValidator />



    <div class="form-group categorySelection">
        <label>
            Category
        </label>
        <select class="form-control" value="@SelectedCategory" @onchange="OnCategoryChanged">
            <option value="0">Select a Category</option>
            @foreach (var item in Categories)
            {
                <option value="@item.Id">@item.Category</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Produto:</label>
        <select class="form-control" @bind="List.ProductId">
            <option value="">Selecione um produto</option>
            @foreach (var prod in FilteredProducts)
            {
                <option value="@prod.Id">@prod.Name</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Quantidade:</label>
        <input type="number" @bind="List.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Preço:</label>
        <input type="number" @bind="List.PriceUnitOfEntry" class="form-control" />

    </div>
    <button type="button" class="btn btn-success mt-2" @onclick="AddProductToList">Add product</button>
    
    
    
    <nav class="mt-3">
        <button class="btn btn-primary" type="submit">@buttonText</button>
        <button @onclick="Return" type="button" class="btn btn-secondary mt-2 ms-2">Return</button>
    </nav>

    @if (NewEntry.ProductEntries.Any())
    {
        <h5 class="mt-4">Added Products:</h5>
        <ul>
            @foreach (var p in NewEntry.ProductEntries)
            {
                var productName = Products.FirstOrDefault(x => x.Id == p.ProductId)?.Name ?? "Unknown";
                <li>
                    @productName - Quantities: @p.Quantity
                    @productName - Price: @p.PriceUnitOfEntry
                    <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveProduct(p)">Remove</button>
                </li>
            }
        </ul>
    }
    <ValidationSummary />
</EditForm>

@if (!string.IsNullOrEmpty(Message))
{
    <p class="text-success mt-3">@Message</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string buttonText => Id > 0 ? "Save" : "Add";

    private int SelectedCategory;
    private List<CategoryDto> Categories = new();

    private List<ProductDto> Products = new();

    private ProductEntryDto List = new();

    public EntryDto NewEntry = new();
    private string Message = string.Empty;

    private List<ProductDto> FilteredProducts => Products
    .Where(p => p.Category != null && p.Category.Id == SelectedCategory)
    .ToList();
    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();

        Products = await ApiService.GetProductsAsync();
        Categories = await ApiService.GetCategoriesAsync();

        if (Id > 0)
        {
            var entry = await ApiService.GetEntryById(Id);
            if (entry != null)
            {

                NewEntry = entry;
            }
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        SelectedCategory = int.Parse(e.Value?.ToString() ?? "0");
        StateHasChanged();
    }



    private async Task OnAddEntry()
    {
        if (Id > 0)
        {
            var response = await ApiService.UpdateEntry(NewEntry);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("The entry was updated successfully!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error, while trying to update an entry", Severity.Error);
            }
        }
        else
        {
            var response = await ApiService.CreateNewEntry(NewEntry);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Entry was created successfully!", Severity.Success);
                NewEntry = new EntryDto();
            }
            else
            {
                Snackbar.Add("Error, while trying to create an entry", Severity.Error);
            }
        }
    }

   private void EditarProduto()
    {
        NavigationManager.NavigateTo($"/editproduct/{Id}");
    }

    private void Return()
    {
        NavigationManager.NavigateTo("/");

    }
    private void RemoveProduct(ProductEntryDto item)
    {
        NewEntry.ProductEntries.Remove(item);
    }

    private void AddProductToList()
    {
        if (List.ProductId > 0 && List.Quantity > 0 && List.PriceUnitOfEntry>0)
        {
            // Evitar duplicados
            var existing = NewEntry.ProductEntries.FirstOrDefault(x => x.ProductId == List.ProductId);
            if (existing != null)
            {
                existing.Quantity += List.Quantity;
                existing.PriceUnitOfEntry = List.PriceUnitOfEntry;
            }
            else
            {
                NewEntry.ProductEntries.Add(new ProductEntryDto
                {
                    ProductId = List.ProductId,
                    Quantity = List.Quantity,
                    PriceUnitOfEntry = List.PriceUnitOfEntry
                });
            }

            List = new ProductEntryDto(); // Limpar campos
        }
    }
 
}
