@page "/productdetails/{Id:int}"
@inject IApiService ApiService
@inject NavigationManager NavigationManager
@using Triopet.Shared.Models
@rendermode InteractiveServer

<h3>Detalhes do Produto</h3>


@if (Produto == null)
{
    <MudText Color="Color.Error">Produto não encontrado.</MudText>
}
else
{
    <MudContainer MaxWidth="MaxWidth.Large" Class="mt-4">

        <MudPaper Class="p-4 mt-3">


            @if (Produto.Images != null && Produto.Images.Any())
            {
                <MudCarousel TData="object" Class="my-4" Style="height:400px; width:600px;" ShowArrows="true" ShowBullets="true">
                    @foreach (var image in Produto.Images)
                    {
                        <MudCarouselItem>
                            <MudImage Src="@image.Url"
                                      Alt="@image.Name"
                                      Style="width: 100%; height: 100%; object-fit: contain;" />
                        </MudCarouselItem>
                    }
                </MudCarousel>
            }  
            else
            {
                <MudText Color="Color.Warning" Class="my-4">Nenhuma imagem disponível para este produto.</MudText>
            }

            <MudText><b>Nome:</b> @Produto.Name</MudText>
            <MudText><b>Categoria:</b> @Produto.Category.Category</MudText>
            <MudText><b>Tipo de Animal:</b> @Produto.AnimalType.AnimalType</MudText>
            <MudText><b>Descrição:</b> @Produto.Description</MudText>
            <MudText><b>Quantidade:</b> @Produto.Quantity</MudText>

            <div class="mt-4">
                <MudButton Color="Color.Primary" OnClick="EditarProduto">Editar</MudButton>
                <MudButton Color="Color.Error" Class="ms-2" OnClick="ExcluirProduto">Excluir</MudButton>
                <MudButton Color="Color.Secondary" Class="ms-2" OnClick="Voltar">Voltar</MudButton>
            </div>

            @if (!string.IsNullOrEmpty(Mensagem))
            {
                <p class="text-success mt-3">@Mensagem</p>
            }

        </MudPaper>
    </MudContainer>

}

@code {


    [Parameter]
    public int Id { get; set; }

    private ProductDto Produto;
    private string Mensagem = string.Empty;
    protected override async Task OnInitializedAsync()
    {
        try
        {
            Produto = await ApiService.GetProductById(Id);
        }
        catch
        {
            Produto = null;
        }
    }

    private void EditarProduto()
    {
        NavigationManager.NavigateTo($"/editproduct/{Id}");
    }

    private async Task ExcluirProduto()
    {
        try
        {
            var response = await ApiService.DeleteProduct(Id);
            if (response.StatusCode == System.Net.HttpStatusCode.OK)
            {
                Mensagem = "Produto excluído com sucesso!";
                StateHasChanged();
                NavigationManager.NavigateTo("/");
            }
            else
            {
                Mensagem = "Erro ao apagar!";
            }
        }
        catch
        {
            Mensagem = "Erro ao excluir o produto.";
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }
}