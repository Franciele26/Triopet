@page "/addproduct"
@page "/addproduct/{Id:int}"
@using Triopet.BusinessContext.Entities
@* @using Triopet.Web.Models *@
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

<MudSnackbarProvider />
@if (Id > 0)
{
    <h3>Edit Product</h3>
}
else
{
    <h3>Add Product</h3>
}

<EditForm Model="NewProduct" OnValidSubmit="OnAddProduct">
<DataAnnotationsValidator />

    <div class="form-group">
        <label>Nome:</label>
        <input type="text" @bind="NewProduct.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Preço:</label>
        <input type="number" step="0.01" @bind="NewProduct.Price" class="form-control" />
    </div>

    <div class="form-group">
        <label>Categoria ID:</label>
        <input type="number" @bind="NewProduct.CategoryId" class="form-control" />
    </div>

    <div class="form-group">
        <label>Tipo de Animal (ID):</label>
        <input type="number" @bind="NewProduct.AnimalTypeId" class="form-control" />
    </div>

    <div class="form-group">
        <label>Descrição:</label>
        <input type="text" @bind="NewProduct.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Quantidade:</label>
        <input type="number" @bind="NewProduct.Quantity" class="form-control" />
    </div>

    <div class="form-group">
    <label>URL da imagem:</label>
    <input type="text" @bind="NovaImagemUrl" class="form-control" />
    </div>

    @{
        var buttonText = Id > 0 ? "Save" : "Add";
    }
    <button class="btn btn-primary" type="submit">@buttonText</button>

    <nav aria-label="Ações do produto" class="mt-3">
        <button @onclick="SalvarProduto" type="button" class="btn btn-primary mt-2">@buttonText</button>
        <button @onclick="Voltar" type="button" class="btn btn-secondary mt-2 ms-2">Voltar</button>
        <button @onclick="AdicionarImagem" class="btn btn-secondary mt-2">Adicionar Imagem</button>
    </nav>

   <ValidationSummary />
</EditForm>

@if (NewProduct.Images.Count > 0)
{
    <div class="mt-3">
        <h5>Imagens adicionadas:</h5>
        <ul>
            @foreach (var img in NewProduct.Images)
            {
                <li>@img.ImageUrl</li>
            }
        </ul>
    </div>
}
@if (!string.IsNullOrEmpty(Mensagem))
{
    <p class="text-success mt-3">@Mensagem</p>
}

@code {
    [Parameter]
    public int? Id { get; set; }
    // [Inject]
    // public IApiService ApiService { get; set; }

    public Product NewProduct = new();
    private string Mensagem = string.Empty;
    private string NovaImagemUrl;

    private void SalvarProduto()
    {
        Mensagem = $"Produto '{NewProduct.Name}' cadastrado com sucesso!";
        NewProduct = new Product();
    }

    // protected override async Task OnInitializedAsync()
    // {
    //     await base.OnInitializedAsync();
    //     if (Id > 0)
    //         NewProduct = await ApiService.GetProductsAsync(Id);
    // }

    private async Task OnAddProduct()
    {
        if (Id > 0)
        {
            var response = await ApiService.UpdateProduct(NewProduct);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto atualizado com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao atualizar produto", Severity.Success);
            }
        }
        else
        {
            var response = await ApiService.AddProductAsync(NewProduct);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto adicionado com sucesso!", Severity.Success);
            }
        }
    }
    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }

    [Inject]
    public ISnackbar Snackbar { get; set; }

    private async void Edit(int productId)
    {
        // var response = await ApiService.GetProductByIdAsync(productId);

        // if (response.IsSuccessStatusCode)
        // {
        //     var productDto = await response.Content.ReadFromJsonAsync<ProductDto>();

        //     NewProduct = new Product
        //     {
        //         Id = productDto.Id,
        //         Name = productDto.Name,
        //         Description = productDto.Description,
        //         Price = productDto.Price,
        //     };

        //     IsEditMode = true;
        // }
        // else
        // {
        //     Snackbar.Add("Erro ao buscar produto para edição.", Severity.Error);
        // }
    }
    private void AdicionarImagem()
    {
        if (!string.IsNullOrWhiteSpace(NovaImagemUrl))
        {
            NewProduct.Images.Add(new Image { ImageUrl = NovaImagemUrl });
            NovaImagemUrl = string.Empty;
        }
    }
}

