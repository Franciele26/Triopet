@page "/addproduct"
@page "/editproduct/{Id:int}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Triopet.Shared.Models
@rendermode InteractiveServer

<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Product</h3>
}
else
{
    <h3>Add Product</h3>
}

<EditForm Model="NewProduct" OnValidSubmit="OnAddProduct">
    <DataAnnotationsValidator />

    <div class="form-group">
        <label>Name:</label>
        <input type="text" @bind="NewProduct.Name" class="form-control" />
    </div>

    <div class="form-group">
        <label>Description:</label>
        <input type="text" @bind="NewProduct.Description" class="form-control" />
    </div>

    <div class="form-group">
        <label>Category:</label>
        <select class="form-control" @bind="NewProduct.CategoryId">
            <option value="">Selecione uma categoria</option>
            @foreach (var cat in Categorias)
            {
                <option value="@cat.Id">@cat.Category</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Animal Type:</label>
        <select class="form-control" @bind="NewProduct.AnimalTypeId">
            <option value="">Selecione um tipo de animal</option>
            @foreach (var type in AnimalTypes)
            {
                <option value="@type.Id">@type.AnimalType</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Quantity:</label>
        <input type="number" @bind="NewProduct.Quantity" class="form-control" />
    </div>

    <div class="form-group">
        <label>Price:</label>
        <input type="number" step="0.01" @bind="NewProduct.PricePerUnit" class="form-control" />
    </div>

    <div class="form-group">
        <label>Image URL:</label>
        <input type="text" @bind="NovaImagemUrl" class="form-control" />
    </div>  


    <nav aria-label="Ações do produto" class="mt-3">
        <button class="btn btn-primary" type="submit">@buttonText</button>
        <button @onclick="Voltar" type="button" class="btn btn-secondary mt-2 ms-2">Back</button>
        <button @onclick="AdicionarImagem" type="button" class="btn btn-secondary mt-2">Add Image</button>
    </nav>

    <ValidationSummary />
</EditForm>
<div>
    @if (ImagensTemporarias.Count > 0)
    {
        <div class="mt-3">
            <h5>Imagens adicionadas:</h5>
            <ul>
                @foreach (var img in ImagensTemporarias)
                {
                    <li>
                        @img.Url
                        <button class="btn btn-danger btn-sm ms-2" @onclick="async () => await RemoverImagem(img)">Remove</button>

                    </li>
                }
            </ul>
        </div>
    }
    <h6>Impossivel de remover, se houver uma unica imagem, em caso de erro. Acrescenta uma nova imagem e remove a errada</h6>
</div>
@if (!string.IsNullOrEmpty(Mensagem))
{
    <p class="text-success mt-3">@Mensagem</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string buttonText => Id > 0 ? "Save" : "Add";

    private List<CategoryDto> Categorias = new();
    private List<AnimalTypeDto> AnimalTypes = new();

    private List<ImageDto> ImagensTemporarias = new();

    public ProductDto NewProduct = new();

    private string Mensagem = string.Empty;
    private string NovaImagemUrl;


    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Categorias = await ApiService.GetCategoriesAsync();
        AnimalTypes = await ApiService.GetAnimalTypesAsync();

        if (Id > 0)
        {
            var product = await ApiService.GetProductById(Id);

            if (product != null)
            {
                product.CategoryId = product.Category?.Id ?? 0;
                product.AnimalTypeId = product.AnimalType?.Id ?? 0;

                NewProduct = product;
                ImagensTemporarias = product.Images;

            }
        }
    }

    private async Task OnAddProduct()
    {
        NewProduct.Images = ImagensTemporarias;
        NewProduct.Category = Categorias.FirstOrDefault(c => c.Id == NewProduct.CategoryId) ?? new CategoryDto();
        NewProduct.AnimalType = AnimalTypes.FirstOrDefault(t => t.Id == NewProduct.AnimalTypeId) ?? new AnimalTypeDto();

        if (Id > 0)
        {
            var response = await ApiService.UpdateProduct(NewProduct);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto atualizado com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao atualizar produto", Severity.Success);
            }
        }
        else
        {
            var response = await ApiService.AddProductAsync(NewProduct);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Produto adicionado com sucesso!", Severity.Success);
                ImagensTemporarias.Clear();
                NewProduct = new ProductDto();
            }
            else
            {
                Snackbar.Add("Erro ao adicionar produto", Severity.Error);
            }
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AdicionarImagem()
    {
        if (!string.IsNullOrWhiteSpace(NovaImagemUrl))
        {
            ImagensTemporarias.Add(new ImageDto { Url = NovaImagemUrl });
            NovaImagemUrl = string.Empty;
        }
    }

    private async Task RemoverImagem(ImageDto imagem)
    {
        if (imagem.Id > 0)
        {
            var response = await ApiService.DeleteImage(imagem.Id);
            if (response.IsSuccessStatusCode)
            {
                ImagensTemporarias.Remove(imagem);
                Snackbar.Add("Imagem removida com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao remover imagem.", Severity.Error);
            }
        }
        else
        {
            // Imagem temporária, só remover localmente
            ImagensTemporarias.Remove(imagem);
            Snackbar.Add("Imagem removida localmente.", Severity.Info);
        }
    }
}