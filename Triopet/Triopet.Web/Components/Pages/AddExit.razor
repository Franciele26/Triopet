@page "/addexit"
@page "/editexit/{Id:int}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Triopet.Shared.Models
@rendermode InteractiveServer

<MudSnackbarProvider />

@if (Id > 0)
{
    <h3>Edit Exit</h3>
}
else
{
    <h3>Add Exit</h3>
}

<EditForm Model="NewExit" OnValidSubmit="OnAddExit">
    <DataAnnotationsValidator />


    <div class="form-group">
        <label>Data e Hora da Saída:</label>
        <InputDate class="form-control"
                   @bind-value="NewExit.DateOfExit"
                   @bind-value:format="yyyy-MM-ddTHH:mm" />
    </div>

    <div class="form-group">
        <label>Motivo (Reason):</label>
        <select class="form-control" @bind="NewExit.ReasonId">
            <option value="">Selecione um motivo</option>
            @foreach (var reason in Reasons)
            {
                <option value="@reason.Id">@reason.Reason</option>
            }
        </select>
    </div>

    <div class="form-group">
        <label>Produto:</label>
        <select class="form-control" @bind="List.ProductId">
            <option value="">Selecione um produto</option>
            @foreach (var prod in Products)
            {
                <option value="@prod.Id">@prod.Name</option>
            }
        </select>

        <label>Quantidade:</label>
        <input type="number" class="form-control" @bind="List.Quantity" />

        <button type="button" class="btn btn-success mt-2" @onclick="AddProductToList">Adicionar Produto</button>
        <button type="button" class="btn btn-success mt-2" @onclick="EditarProduto">Editar</button>

    </div>

    <nav class="mt-3">
        <button class="btn btn-primary" type="submit">@buttonText</button>
        <button @onclick="Voltar" type="button" class="btn btn-secondary mt-2 ms-2">Voltar</button>
    </nav>

    @if (NewExit.ProductExitDtos.Any())
    {
        <h5 class="mt-4">Produtos adicionados:</h5>
        <ul>
            @foreach (var p in NewExit.ProductExitDtos)
            {
                var productName = Products.FirstOrDefault(x => x.Id == p.ProductId)?.Name ?? "Desconhecido";
                <li>
                    @productName - Quantidade: @p.Quantity
                    <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveProduct(p)">Remover</button>
                </li>
            }
        </ul>
    }
    <ValidationSummary />
</EditForm>

@if (!string.IsNullOrEmpty(Mensagem))
{
    <p class="text-success mt-3">@Mensagem</p>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public string buttonText => Id > 0 ? "Save" : "Add";

    private List<ReasonDto> Reasons = new();
    private List<ProductDto> Products = new();

    private ProductExitDto List = new();

    private ExitDto NewExit = new();
    private string Mensagem = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Reasons = await ApiService.GetReasonsAsync();
        Products = await ApiService.GetProductsAsync();

        if (Id > 0)
        {
            var exit = await ApiService.GetExitById(Id);

            if (exit != null)
            {
                NewExit = exit;
            }
        }
    }

    private void EditarProduto()
    {
        NavigationManager.NavigateTo($"/editproduct/{Id}");
    }
      
    private void RemoveProduct(ProductExitDto item)
    {
        NewExit.ProductExitDtos.Remove(item);
    }

    private async Task OnAddExit()
    {
        if (!NewExit.ProductExitDtos.Any())
        {
            Snackbar.Add("Tens de adicionar pelo menos um produto!", Severity.Error);
            return;
        }

        if (Id > 0)
        {
            var response = await ApiService.UpdateExit(NewExit);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Saída atualizada com sucesso!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Erro ao atualizar saída", Severity.Error);
            }
        }
        else
        {
            var response = await ApiService.CreateNewExit(NewExit);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Saída registrada com sucesso!", Severity.Success);
                NewExit = new ExitDto();
            }
            else
            {
                Snackbar.Add("Erro ao registrar saída", Severity.Error);
            }
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AddProductToList()
    {
        if (List.ProductId > 0 && List.Quantity > 0)
        {
            // Evitar duplicados
            var existing = NewExit.ProductExitDtos.FirstOrDefault(x => x.ProductId == List.ProductId);

            if (existing != null)
            {
                existing.Quantity += List.Quantity;
            }
            else
            {
                NewExit.ProductExitDtos.Add(new ProductExitDto
                {
                    ProductId = List.ProductId,
                    Quantity = List.Quantity
                });
            }

            List = new ProductExitDto(); // Limpar campos
        }
    }
}