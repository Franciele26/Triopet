@page "/addexit"
@page "/editexit/{Id:int}"
@inject NavigationManager NavigationManager
@inject IApiService ApiService
@inject ISnackbar Snackbar
@using Triopet.Shared.Models
@rendermode InteractiveServer

<MudSnackbarProvider />

<div>

    @if (Id > 0)
    {
        <MudText Typo="Typo.h4" GutterBottom="true">
            Edit Exit
        </MudText>
    }
    else
    {
        <MudText Typo="Typo.h4" GutterBottom="true">
            Add Exit
        </MudText>
    }

    <EditForm Model="NewExit" OnValidSubmit="OnAddExit">
        <DataAnnotationsValidator />

        <div class="form-group">
            <label>Date Exit:</label>
            <InputDate class="form-control"
                       @bind-value="NewExit.DateOfExit"
                       @bind-value:format="yyyy-MM-ddTHH:mm" />
        </div>

        <div class="form-group">
            <label>Reason:</label>
            <select class="form-control" @bind="NewExit.ReasonId">
                <option value="">Select a motif</option>
                @foreach (var reason in Reasons)
                {
                    <option value="@reason.Id">@reason.Reason</option>
                }
            </select>
        </div>

        <div class="form-group categorySelection">
            <label>
                Category
            </label>
            <select class="form-control" value="@SelectedCategory" @onchange="OnCategoryChanged">
                <option value="0">Select a Category</option>
                @foreach (var item in Categories)
                {
                    <option value="@item.Id">@item.Category</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label>Product:</label>
            <select class="form-control" @bind="List.ProductId">
                <option value="">Select a product</option>
                @foreach (var prod in FilteredProducts)
                {
                    <option value="@prod.Id">@prod.Name</option>
                }
            </select>

            <label>Quantity:</label>
            <input type="number" class="form-control" @bind="List.Quantity" />


            <button type="button" class="btn btn-success mt-5" @onclick="AddProductToList">Add Product</button>
            @*             <button type="button" class="btn btn-success mt-2" @onclick="EditarProduto">Editar</button>
            *@
        </div>

        <nav class="mt-3 d-flex align-items-center">
            <button class="btn btn-primary" type="submit">@buttonText</button>
            <button @onclick="Voltar" type="button" class="btn btn-secondary ms-2">Return</button>
        </nav>

        @if (NewExit.ProductExitDtos.Any())
        {
            <h5 class="mt-4">Added products:</h5>
            <ul>
                @foreach (var p in NewExit.ProductExitDtos)
                {
                    var productName = Products.FirstOrDefault(x => x.Id == p.ProductId)?.Name ?? "Unknown";
                    <li>
                        @productName - Quantity: @p.Quantity
                        <button class="btn btn-sm btn-danger ms-2" @onclick="() => RemoveProduct(p)">Remove</button>
                    </li>
                }
            </ul>
        }

        <ValidationSummary />
    </EditForm>

    @if (!string.IsNullOrEmpty(Mensagem))
    {
        <p class="text-success mt-3">@Mensagem</p>
    }
</div>

@code {
    [Parameter]
    public int Id { get; set; }

    public string buttonText => Id > 0 ? "Save" : "Add";

    private List<ReasonDto> Reasons = new();
    private List<ProductDto> Products = new();

    private ProductExitDto List = new();

    private ExitDto NewExit = new();
    private string Mensagem = string.Empty;

    private int SelectedCategory;
    private List<CategoryDto> Categories = new();

    private List<ProductDto> FilteredProducts => Products
    .Where(p => p.Category != null && p.Category.Id == SelectedCategory)
    .ToList();

    protected override async Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        Reasons = await ApiService.GetReasonsAsync();
        Products = await ApiService.GetProductsAsync();
        Categories = await ApiService.GetCategoriesAsync();

        if (Id > 0)
        {
            var exit = await ApiService.GetExitById(Id);

            if (exit != null)
            {
                NewExit = exit;
            }
        }
    }

    private async Task OnCategoryChanged(ChangeEventArgs e)
    {
        SelectedCategory = int.Parse(e.Value?.ToString() ?? "0");
        StateHasChanged();
    }

    private void EditarProduto()
    {
        NavigationManager.NavigateTo($"/editproduct/{Id}");
    }

    private void RemoveProduct(ProductExitDto item)
    {
        NewExit.ProductExitDtos.Remove(item);
    }

    private async Task OnAddExit()
    {
        if (!NewExit.ProductExitDtos.Any())
        {
            Snackbar.Add("You need to add at least one product!", Severity.Error);
            return;
        }

        if (Id > 0)
        {
            var response = await ApiService.UpdateExit(NewExit);

            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Exit was created successfully!!", Severity.Success);
            }
            else
            {
                Snackbar.Add("Error when trying to create an exit", Severity.Error);
            }
        }
        else
        {
            var response = await ApiService.CreateNewExit(NewExit);
            if (response.IsSuccessStatusCode)
            {
                Snackbar.Add("Exit was successfully registered!", Severity.Success);
                NewExit = new ExitDto();
            }
            else
            {
                Snackbar.Add("Error when trying to register an exit", Severity.Error);
            }
        }
    }

    private void Voltar()
    {
        NavigationManager.NavigateTo("/");
    }

    private void AddProductToList()
    {
        if (List.ProductId > 0 && List.Quantity > 0)
        {
            // Evitar duplicados
            var existing = NewExit.ProductExitDtos.FirstOrDefault(x => x.ProductId == List.ProductId);

            if (existing != null)
            {
                existing.Quantity += List.Quantity;
            }
            else
            {
                NewExit.ProductExitDtos.Add(new ProductExitDto
                {
                    ProductId = List.ProductId,
                    Quantity = List.Quantity
                });
            }

            List = new ProductExitDto(); // Limpar campos
        }
    }

}